{
  "name": "DynProt_Last",
  "nodes": [
    {
      "parameters": {
        "path": "9e711b4d-c391-4e6b-b36a-4a268de742b3",
        "formTitle": "üèãÔ∏è Votre Profil Nutritionnel DynProt",
        "formDescription": "Cr√©ons ensemble votre profil personnalis√© pour un suivi optimal des prot√©ines !",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Pr√©nom",
              "requiredField": true
            },
            {
              "fieldLabel": "√Çge",
              "fieldType": "number",
              "requiredField": true
            },
            {
              "fieldLabel": "Poids actuel (kg)",
              "fieldType": "number",
              "requiredField": true
            },
            {
              "fieldLabel": "Objectif quotidien de prot√©ines (g)",
              "fieldType": "number",
              "requiredField": true
            },
            {
              "fieldLabel": "Niveau d'activit√©",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "S√©dentaire"
                  },
                  {
                    "option": "L√©g√®rement actif"
                  },
                  {
                    "option": "Mod√©r√©ment actif"
                  },
                  {
                    "option": "Tr√®s actif"
                  },
                  {
                    "option": "Extr√™mement actif"
                  }
                ]
              },
              "requiredField": true
            },
            {
              "fieldLabel": "Objectif principal",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Maintenir mon poids actuel"
                  },
                  {
                    "option": "Perdre du poids / D√©finition musculaire"
                  },
                  {
                    "option": "Prendre de la masse musculaire"
                  },
                  {
                    "option": "Am√©liorer mes performances sportives"
                  }
                ]
              },
              "requiredField": true
            }
          ]
        },
        "responseMode": "responseNode",
        "options": {
          "appendAttribution": "={{ false }}"
        }
      },
      "id": "0e484f99-2e8d-4b67-8641-a1271455b041",
      "name": "üìù Enhanced Form Onboarding",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "webhookId": "9e711b4d-c391-4e6b-b36a-4a268de742b3"
    },
    {
      "parameters": {
        "jsCode": "// üíæ Sauvegarde du profil utilisateur initial - VERSION CORRIG√âE\nconst formData = $input.first().json;\n\n// G√©n√©ration d'un ID utilisateur unique\nconst userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n\n// üîß CORRECTION : Mapping correct des valeurs du formulaire\nconst objectifMapping = {\n  \"Maintenir mon poids actuel\": \"Maintien du poids\",\n  \"Perdre du poids / D√©finition musculaire\": \"Perte de poids\", \n  \"Prendre de la masse musculaire\": \"Prise de masse\",\n  \"Am√©liorer mes performances sportives\": \"Performance sportive\"\n};\n\n// R√©cup√©ration et mapping de l'objectif principal\nconst objectifOriginal = formData['Objectif principal'];\nconst objectifMapped = objectifMapping[objectifOriginal] || objectifOriginal;\n\nconsole.log('Objectif original:', objectifOriginal);\nconsole.log('Objectif mapp√©:', objectifMapped);\n\nconst userProfile = {\n  user_id: userId,\n  prenom: formData['Pr√©nom'],\n  age: parseInt(formData['√Çge']),\n  poids: parseFloat(formData['Poids actuel (kg)']),\n  objectif_proteines: parseInt(formData['Objectif quotidien de prot√©ines (g)']),\n  niveau_activite: formData['Niveau d\\'activit√©'],\n  objectif_principal: objectifMapped, // ‚Üê Utilise la valeur mapp√©e\n  created_at: new Date().toISOString(),\n  onboarding_completed: true\n};\n\nconsole.log('Profil utilisateur cr√©√©:', JSON.stringify(userProfile, null, 2));\n\nreturn [{ json: userProfile }];"
      },
      "id": "4553b8b6-2423-4f1b-88b1-ee08cf55613a",
      "name": "üîß Process Profile",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Profil utilisateur avec UPSERT\nINSERT INTO user_profiles (\n  user_id, prenom, age, poids, niveau_activite, objectif_principal, created_at\n) VALUES (\n  '{{ $json.user_id }}',\n  '{{ $json.prenom }}',\n  {{ $json.age }},\n  {{ $json.poids }},\n  '{{ $json.niveau_activite }}',\n  '{{ $json.objectif_principal }}',\n  '{{ $json.created_at }}'\n) ON CONFLICT (user_id) DO UPDATE SET\n  prenom = EXCLUDED.prenom,\n  age = EXCLUDED.age,\n  poids = EXCLUDED.poids,\n  niveau_activite = EXCLUDED.niveau_activite,\n  objectif_principal = EXCLUDED.objectif_principal;\n\n-- Objectif prot√©ines avec UPSERT\nINSERT INTO user_goals (\n  user_id, daily_protein_goal, created_at\n) VALUES (\n  '{{ $json.user_id }}',\n  {{ $json.objectif_proteines }},\n  '{{ $json.created_at }}'\n) ON CONFLICT (user_id) DO UPDATE SET\n  daily_protein_goal = EXCLUDED.daily_protein_goal;\n\n-- Statut onboarding avec UPSERT\nINSERT INTO user_onboarding_status (\n  user_id, onboarding_completed, welcome_message_sent, created_at\n) VALUES (\n  '{{ $json.user_id }}',\n  true,\n  false,\n  '{{ $json.created_at }}'\n) ON CONFLICT (user_id) DO UPDATE SET\n  onboarding_completed = EXCLUDED.onboarding_completed,\n  welcome_message_sent = false;\n\n-- Retour des donn√©es\nSELECT \n  up.user_id,\n  up.prenom,\n  up.age,\n  up.poids,\n  up.niveau_activite,\n  up.objectif_principal,\n  ug.daily_protein_goal as objectif_proteines,\n  'profile_created' as status\nFROM user_profiles up\nJOIN user_goals ug ON up.user_id = ug.user_id\nWHERE up.user_id = '{{ $json.user_id }}';",
        "options": {}
      },
      "id": "16122c2e-8c90-4757-9277-499004c45e58",
      "name": "üíæ Save User Profile",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        440,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üéâ G√©n√©ration du message de bienvenue avec URL webhook corrig√©e\nconst userData = $input.first().json;\n\n// URL du chat corrig√©e avec le bon webhook GET\nconst chatUrlWithMessage = `http://localhost:5678/webhook/e4a90603-3a21-4289-9f42-0c83f4caf994?userId=${userData.user_id}`;\n\n// Message d'initialisation (pour compatibilit√© si besoin)\nconst initMessage = `INIT_USER:${userData.user_id}|Bonjour ! Je suis votre nouvel utilisateur et j'aimerais commencer le suivi de mes prot√©ines.`;\n\n// Cr√©er le message de bienvenue avec les donn√©es utilisateur\nconst welcomeMessage = {\n  user_id: userData.user_id,\n  message_type: 'system_welcome',\n  content: `üéâ **Bienvenue ${userData.prenom} !**\n\nVotre profil nutritionnel a √©t√© cr√©√© avec succ√®s :\n\nüìä **Votre configuration :**\n‚Ä¢ **Objectif quotidien** : ${userData.objectif_proteines}g de prot√©ines\n‚Ä¢ **Poids actuel** : ${userData.poids}kg\n‚Ä¢ **Niveau d'activit√©** : ${userData.niveau_activite}\n‚Ä¢ **Objectif** : ${userData.objectif_principal}\n\nüí¨ **Comment √ßa marche ?**\nD√©crivez-moi simplement vos repas et je calculerai automatiquement les prot√©ines !\n\nüìù **Exemples d'utilisation :**\n‚Ä¢ \"J'ai mang√© 200g de poulet grill√©\"\n‚Ä¢ \"Une omelette avec 3 ≈ìufs\"\n‚Ä¢ \"Un shake de whey de 30g\"\n‚Ä¢ \"Voici une photo de mon repas\" (avec image)\n\nüéØ **Commencez d√®s maintenant !**\nCliquez sur le bouton ci-dessous pour acc√©der √† votre chat personnalis√© !`,\n  timestamp: new Date().toISOString(),\n  auto_generated: true,\n  chat_url: chatUrlWithMessage, // ‚Üê URL corrig√©e\n  init_message: initMessage,\n  user_profile: userData\n};\n\nconsole.log('Message de bienvenue g√©n√©r√© avec URL corrig√©e:', JSON.stringify(welcomeMessage, null, 2));\nconsole.log('Chat URL:', chatUrlWithMessage);\n\nreturn [{ json: welcomeMessage }];"
      },
      "id": "c3b28a6a-e43c-4d92-bcb1-b67873f6c164",
      "name": "üí¨ Generate Welcome Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Sauvegarde du message de bienvenue\nINSERT INTO chat_messages (\n  user_id,\n  message_content,\n  message_type,\n  sender_type,\n  timestamp,\n  metadata\n) VALUES (\n  '{{ $json.user_id }}',\n  $message${{ $json.content }}$message$,\n  '{{ $json.message_type }}',\n  'system',\n  '{{ $json.timestamp }}',\n  '{\"auto_generated\": true, \"onboarding_complete\": true}'\n);\n\n-- Mise √† jour du statut d'onboarding\nUPDATE user_onboarding_status \nSET welcome_message_sent = true, \n    updated_at = NOW() \nWHERE user_id = '{{ $json.user_id }}';\n\n-- Retour des donn√©es avec URL du chat\nSELECT \n  '{{ $json.user_id }}' as user_id,\n  '{{ $json.chat_url }}' as chat_url,\n  'welcome_saved' as status,\n  '{{ $json.user_id }}' as user_profile_id;",
        "options": {}
      },
      "id": "56aa1389-7d97-4e6e-a1d7-6429ada841b9",
      "name": "üíæ Save Welcome Message",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        880,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üé® Page de succ√®s avec URL webhook corrig√©e\nconst data = $('üíæ Save User Profile').first().json;\n\nconsole.log('Donn√©es re√ßues dans Generate Success Page:', JSON.stringify(data, null, 2));\n\n// R√©cup√©rer les donn√©es utilisateur\nlet userData = {\n  prenom: data.prenom || 'Utilisateur',\n  objectif_proteines: data.objectif_proteines || 120,\n  poids: data.poids || 70,\n  niveau_activite: data.niveau_activite || 'Mod√©r√©ment actif',\n  objectif_principal: data.objectif_principal || 'Maintien du poids'\n};\n\n// URL corrig√©e avec le bon webhook GET\nconst chatUrl = `http://localhost:5678/webhook/e4a90603-3a21-4289-9f42-0c83f4caf994?userId=${data.user_id}&prenom=${data.prenom}`;\nconst userId = data.user_id;\n\nconsole.log('URL de chat g√©n√©r√©e:', chatUrl);\n\nconst successPage = `<!doctypehtml><html lang=fr><meta charset=UTF-8><meta content=\"width=device-width,initial-scale=1\"name=viewport><title>DynProt - Profil Cr√©√© ‚úÖ</title><style>*{margin:0;padding:0;box-sizing:border-box}body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;background:linear-gradient(135deg,#667eea 0,#764ba2 100%);min-height:100vh;display:flex;align-items:center;justify-content:center;padding:20px}.container{background:rgba(255,255,255,.95);backdrop-filter:blur(10px);border-radius:24px;padding:40px;box-shadow:0 20px 40px rgba(0,0,0,.1);text-align:center;max-width:520px;width:100%;animation:slideUp .6s ease-out}@keyframes slideUp{from{opacity:0;transform:translateY(30px)}to{opacity:1;transform:translateY(0)}}.success-icon{font-size:72px;margin-bottom:24px;animation:bounce 1s ease-in-out}@keyframes bounce{0%,100%,20%,50%,80%{transform:translateY(0)}40%{transform:translateY(-20px)}60%{transform:translateY(-10px)}}h1{color:#333;margin-bottom:16px;font-size:28px;font-weight:700}.subtitle{color:#666;margin-bottom:32px;font-size:18px}.user-info{background:linear-gradient(135deg,#f8f9fa 0,#e9ecef 100%);border-radius:16px;padding:24px;margin:24px 0;border:1px solid rgba(0,0,0,.05)}.user-info h3{color:#495057;margin-bottom:16px;font-size:20px}.stat-grid{display:grid;grid-template-columns:1fr 1fr;gap:16px;margin-top:16px}.stat-item{background:#fff;padding:12px;border-radius:8px;border:1px solid rgba(0,0,0,.05)}.stat-label{font-size:12px;color:#6c757d;margin-bottom:4px;text-transform:uppercase;font-weight:600;letter-spacing:.5px}.stat-value{font-size:16px;font-weight:700;color:#495057}.chat-button{background:linear-gradient(135deg,#667eea 0,#764ba2 100%);color:#fff;border:none;border-radius:50px;padding:16px 32px;font-size:18px;font-weight:600;cursor:pointer;text-decoration:none;display:inline-flex;align-items:center;gap:8px;margin:24px 0;transition:all .3s ease;box-shadow:0 4px 15px rgba(102,126,234,.4)}.chat-button:hover{transform:translateY(-2px);box-shadow:0 8px 25px rgba(102,126,234,.6)}.tips{background:linear-gradient(135deg,#e3f2fd 0,#bbdefb 100%);border-radius:16px;padding:24px;margin-top:32px;text-align:left;border:1px solid rgba(33,150,243,.1)}.tips h4{color:#1565c0;margin-bottom:16px;display:flex;align-items:center;gap:8px}.tips ul{list-style:none;margin-bottom:16px}.tips li{margin-bottom:8px;padding-left:20px;position:relative;color:#1976d2}.tips li::before{content:'‚úì';position:absolute;left:0;color:#4caf50;font-weight:700}.examples{background:rgba(255,255,255,.7);border-radius:8px;padding:12px;font-size:14px;color:#37474f;line-height:1.4}.countdown{margin-top:24px;font-size:14px;color:#666}.progress-bar{width:100%;height:4px;background:rgba(102,126,234,.2);border-radius:2px;margin-top:8px;overflow:hidden}.progress-fill{height:100%;background:linear-gradient(90deg,#667eea,#764ba2);border-radius:2px;animation:progress 8s linear}@keyframes progress{from{width:0%}to{width:100%}}</style><div class=container><div class=success-icon>üéâ</div><h1>Profil cr√©√© avec succ√®s !</h1><p class=subtitle>Bonjour <strong>${userData.prenom}</strong>, votre assistant nutritionnel est pr√™t !<div class=user-info><h3>üìä Votre configuration DynProt</h3><div class=stat-grid><div class=stat-item><div class=stat-label>Objectif quotidien</div><div class=stat-value>${userData.objectif_proteines}g</div></div><div class=stat-item><div class=stat-label>Poids actuel</div><div class=stat-value>${userData.poids}kg</div></div><div class=stat-item><div class=stat-label>Niveau d'activit√©</div><div class=stat-value>${userData.niveau_activite}</div></div><div class=stat-item><div class=stat-label>Objectif</div><div class=stat-value>${userData.objectif_principal}</div></div></div></div><a class=chat-button href=${chatUrl}>üí¨ Commencer le suivi</a><form class=\"upload-form\" action=\"http://localhost:5678/webhook/ebd4abc8-6795-4fbe-ba99-c8574f0e3416\" method=\"POST\" enctype=\"multipart/form-data\"><input type=\"hidden\" name=\"userId\" value=\"${userId}\"><input type=\"text\" name=\"message\" placeholder=\"Message\"><input type=\"file\" name=\"image\"><button type=\"submit\">Envoyer</button></form><div class=tips><h4>üí° Comment utiliser DynProt ?</h4><ul><li>D√©crivez vos repas en langage naturel<li>L'IA calcule automatiquement les prot√©ines<li>Suivez votre progression en temps r√©el<li>Envoyez des photos de vos repas</ul><div class=examples><strong>Exemples de messages :</strong><br>\"200g de saumon grill√©\"<br>\"Une omelette avec 3 ≈ìufs et jambon\"<br>\"Un shake de whey vanille 30g\"<br>\"Voici une photo de mon repas\" + üì∏</div></div><div class=countdown><div>Redirection automatique dans <span id=timer>8</span> secondes</div><div class=progress-bar><div class=progress-fill></div></div></div></div><script>const userId = '${userId}';const chatUrl = '${chatUrl}';let countdown = 8;const timerElement = document.getElementById('timer');const interval = setInterval(() => {countdown--;timerElement.textContent = countdown;if (countdown <= 0) {clearInterval(interval);window.location.href = chatUrl;}}, 1000);</script>`;\n\nreturn [{\n  json: {\n    htmlContent: successPage,\n    chatUrl: chatUrl,\n    userId: userId,\n    responseType: 'html'\n  }\n}];\n"
      },
      "id": "4e396e05-bc95-4ff8-bef8-670fe30468e2",
      "name": "üé® Generate Success Page",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        0
      ]
    },
    {
      "parameters": {
        "jsCode": "// üîß ENHANCED PREPARE CHAT DATA - VRAIMENT Corrig√©\nconst data = $input.first().json;\n\nconsole.log('=== ENHANCED PREPARE CHAT DATA ===');\nconsole.log('üîç Donn√©es re√ßues:', JSON.stringify(data, null, 2));\nconsole.log('üîç Body:', JSON.stringify(data.body, null, 2));\nconsole.log('üîç Query:', JSON.stringify(data.query, null, 2));\n\nlet userId = 'anonymous_' + Date.now(); // Fallback\nlet actualMessage = '';\nlet uploadedImage = null;\n\n// WEBHOOK POST - Les donn√©es sont dans data.body\n  if (data.body && typeof data.body === 'object') {\n    console.log('üì® Donn√©es POST d√©tect√©es dans body');\n\n    if (data.body.userId) {\n      userId = data.body.userId;\n      console.log('‚úÖ User ID trouv√© dans body:', userId);\n    }\n\n    if (data.body.message) {\n      actualMessage = data.body.message;\n      console.log('‚úÖ Message trouv√© dans body:', actualMessage);\n    }\n\n    if (data.files && data.files.image) {\n      console.log('üì∏ Fichier image d√©tect√©');\n      const fileData = data.files.image.data || data.files.image;\n      uploadedImage = Buffer.from(fileData, 'binary').toString('base64');\n    }\n  }\n// WEBHOOK GET - Les donn√©es sont dans data.query  \nelse if (data.query && data.query.userId) {\n  console.log('üì• Donn√©es GET d√©tect√©es dans query');\n  userId = data.query.userId;\n  actualMessage = data.query.message || '';\n  console.log('‚úÖ User ID depuis query:', userId);\n}\n// LEGACY - Compatibilit√© avec ancien chat interface\nelse if (data.chatInput) {\n  console.log('üîÑ Mode legacy d√©tect√©');\n  actualMessage = data.chatInput;\n  \n  if (actualMessage.startsWith('INIT_USER:')) {\n    const parts = actualMessage.split('|');\n    userId = parts[0].replace('INIT_USER:', '');\n    actualMessage = parts[1] || 'o√π j\\'en suis ?';\n    console.log('‚úÖ User ID extrait depuis INIT_USER:', userId);\n  } else if (data.sessionId) {\n    userId = data.sessionId;\n    console.log('‚úÖ User ID depuis sessionId:', userId);\n  }\n}\nelse {\n  console.log('‚ùå Structure de donn√©es non reconnue');\n  console.log('Cl√©s disponibles:', Object.keys(data));\n  console.log('Type de body:', typeof data.body);\n  console.log('Type de query:', typeof data.query);\n}\n\nconsole.log('üéØ User ID FINAL:', userId);\nconsole.log('üí¨ Message FINAL:', actualMessage);\n\n// Validation finale\nconst isValidUserId = userId && !userId.startsWith('anonymous');\nconst hasMessage = actualMessage && actualMessage.trim().length > 0;\n\nconsole.log('‚úÖ UserId valide:', isValidUserId);\nconsole.log('‚úÖ Message valide:', hasMessage);\n\n// Construction du payload final\n  const payload = {\n    user_id: userId,\n    timestamp: new Date().toISOString(),\n    original_message: actualMessage,\n    is_welcome_session: actualMessage.includes('INIT_USER:'),\n    session_type: 'working',\n    image_base64: uploadedImage,\n    debug_info: {\n    source_type: data.body?.userId ? 'WEBHOOK_POST' :\n                 data.query?.userId ? 'WEBHOOK_GET' :\n                 data.chatInput ? 'LEGACY_CHAT' : 'UNKNOWN',\n    has_user_id: isValidUserId,\n    has_message: hasMessage,\n    original_keys: Object.keys(data),\n    body_keys: data.body ? Object.keys(data.body) : [],\n    extraction_success: isValidUserId && hasMessage\n  }\n};\n\nconsole.log('‚úÖ PAYLOAD FINAL:', JSON.stringify(payload, null, 2));\nreturn [{ json: payload }];\n"
      },
      "id": "32f71410-4f5c-4660-96f1-83246e17f78d",
      "name": "üîß Enhanced Prepare Chat Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        845
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.original_message }}",
        "options": {
          "systemMessage": "# CLASSIFICATEUR D'INTENTIONS - AGENT N8N\n\n## üéØ MISSION\nTu es un agent classificateur qui DOIT obligatoirement utiliser l'outil THINK avant de r√©pondre.\n\n## üìã PROCESSUS OBLIGATOIRE\n\n### √âTAPE 1 : ANALYSE AVEC THINK (OBLIGATOIRE)\n```\nUTILISE L'OUTIL THINK pour analyser ce message exact :\n\"{{ $json.original_message }}\"\n```\n\n**Dans ton analyse THINK, examine :**\n- Le contenu exact du message utilisateur\n- La pr√©sence de mots-cl√©s d'intention\n- Les nombres pr√©sents dans le message R√âEL (pas les exemples)\n- Le type d'action demand√©e\n\n### √âTAPE 2 : CLASSIFICATION (APR√àS THINK)\nR√©ponds ensuite avec le JSON de classification.\n\n## üîç R√àGLES DE CLASSIFICATION\n\n### üéØ **GOAL_UPDATE** (PRIORIT√â ABSOLUE)\n- **Trigger** : Message contient \"objectif\" + un nombre\n- **Action** : Extraire le nombre EXACT du message utilisateur uniquement\n- **Patterns** (exemples de structure, PAS les vraies valeurs) :\n  - \"nouvel objectif [NOMBRE]g\" ‚Üí extrait [NOMBRE]\n  - \"objectif [NOMBRE]g\" ‚Üí extrait [NOMBRE]  \n  - \"changer objectif √† [NOMBRE]g\" ‚Üí extrait [NOMBRE]\n\n### üçΩÔ∏è **MEAL** (Consommation alimentaire)\n- **Trigger** : Verbes d'action alimentaire + nom d'aliment\n- **Verbes** : mang√©, bu, pris, consomm√©, aval√©, grignot√©\n- **Data** : Description compl√®te de ce qui est consomm√©\n\n### üìä **STATUS** (Demande d'informations)\n- **Trigger** : Demande de progression/bilan\n- **Expressions** : \"o√π j'en suis ?\", \"ma progression\", \"mon bilan\", \"mes stats\"\n- **Condition** : AUCUN aliment ni objectif mentionn√©\n\n### üì∏ **IMAGE** (Analyse d'image)\n- **Trigger** : R√©f√©rence √† une image/photo\n- **Expressions** : \"voici une photo\", \"regarde cette image\", \"analyse cette photo\"\n\n## ‚ö†Ô∏è R√àGLES CRITIQUES D'EXTRACTION\n\n1. **Message √† analyser** : `\"{{ $json.original_message }}\"`\n2. **Extraction de nombres** :\n   - Lis UNIQUEMENT le message utilisateur r√©el\n   - Ignore TOUS les exemples et patterns\n   - Cherche le premier nombre dans le message r√©el\n   - Utilise ce nombre exact dans \"new_goal\"\n\n## üì§ FORMAT DE R√âPONSE (APR√àS THINK)\n\n```json\n{\n  \"action\": \"GOAL_UPDATE|MEAL|STATUS|IMAGE\",\n  \"confidence\": \"high|medium|low\",\n  \"data\": {\n    // GOAL_UPDATE: {\"new_goal\": NOMBRE_DU_MESSAGE_UTILISATEUR}\n    // MEAL: {\"description\": \"description_compl√®te_consommation\"}\n    // STATUS: {}\n    // IMAGE: {}\n  },\n  \"reasoning\": \"explication_avec_nombre_exact_trouv√©\"\n}\n```\n\n## üî¥ RAPPELS IMPORTANTS\n\n- **Message source** : `\"{{ $json.original_message }}\"`\n- **Processus** : THINK d'abord, JSON ensuite\n- **Nombres** : Seulement ceux du message utilisateur r√©el\n- **Priorit√©** : GOAL_UPDATE avant tout autre classification\n- **Exactitude** : Extraire les valeurs pr√©cises, pas approximatives\n\n---\n\n**‚ö° D√âMARRAGE** : Commence IMM√âDIATEMENT par utiliser l'outil THINK pour analyser le message utilisateur."
        }
      },
      "id": "98fdfb89-540c-4666-a4d1-9366471d1ead",
      "name": "ü§ñ Smart Classifier",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        472,
        845
      ]
    },
    {
      "parameters": {
        "jsCode": "// üîß Parse et route les actions - VERSION CORRIG√âE\nconst classifierData = $input.first().json;\nconst chatData = $('üíæ Save Uploaded Image').first().json;\n\nconsole.log('=== PARSE ACTIONS ===');\nconsole.log('ü§ñ Donn√©es classifier:', JSON.stringify(classifierData, null, 2));\nconsole.log('üí¨ Donn√©es chat:', JSON.stringify(chatData, null, 2));\n\nlet result;\n\ntry {\n  // Parser la r√©ponse du classifier\n  if (classifierData.output) {\n    result = JSON.parse(classifierData.output);\n  } else {\n    result = classifierData;\n  }\n  \n  // Ajouter les m√©tadonn√©es utilisateur depuis Enhanced Prepare Chat Data\n  result.user_id = chatData.user_id;\n  result.timestamp = chatData.timestamp;\n  result.original_message = chatData.original_message;\n  result.is_welcome_session = chatData.is_welcome_session;\n  \n  console.log('‚úÖ Action classifi√©e avec m√©tadonn√©es:', JSON.stringify(result, null, 2));\n  \n  return [{ json: result }];\n  \n} catch (error) {\n  console.log('‚ùå Erreur parsing:', error.message);\n  \n  // Fallback vers MEAL par d√©faut avec m√©tadonn√©es\n  return [{ \n    json: { \n      action: \"MEAL\",\n      confidence: \"medium\",\n      data: { description: chatData.original_message },\n      reasoning: \"Classification par d√©faut\",\n      user_id: chatData.user_id,\n      timestamp: chatData.timestamp,\n      original_message: chatData.original_message,\n      is_welcome_session: chatData.is_welcome_session\n    } \n  }];\n}\n"
      },
      "id": "5d5875c1-2c84-4160-b823-ac884bf5af2b",
      "name": "üîß Parse Actions",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        845
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE user_goals \nSET daily_protein_goal = {{ $json.data.new_goal }}, \n    updated_at = NOW() \nWHERE user_id = '{{ $json.user_id }}'\nRETURNING user_id, daily_protein_goal, 'goal_updated' as action;",
        "options": {}
      },
      "id": "261d43cd-f181-469b-b832-baa21275e949",
      "name": "üéØ Update Goal",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1560,
        660
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  DATE(me.timestamp) as date,\n  up.prenom,\n  COALESCE(SUM(me.proteines_apportees), 0) as total_proteins,\n  ug.daily_protein_goal,\n  CASE \n    WHEN ug.daily_protein_goal > 0 THEN ROUND((COALESCE(SUM(me.proteines_apportees), 0) / ug.daily_protein_goal * 100)::numeric, 1)\n    ELSE 0\n  END as progress_percent\nFROM user_goals ug\nJOIN user_profiles up ON ug.user_id = up.user_id\nLEFT JOIN meal_entries me ON ug.user_id = me.user_id AND DATE(me.timestamp) = CURRENT_DATE\nWHERE ug.user_id = '{{ $json.user_id }}'\nGROUP BY DATE(me.timestamp), up.prenom, ug.daily_protein_goal, ug.user_id;",
        "options": {}
      },
      "id": "30ab9401-11db-4438-a017-03e900a85512",
      "name": "üìä Get Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1560,
        460
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.data.description }}",
        "options": {
          "systemMessage": "Tu es un expert en nutrition sp√©cialis√© dans l'analyse compl√®te de repas.\n\nAnalyse cette description de repas et retourne les informations nutritionnelles :\n\nTu dois estimer :\n1. Le ou les aliments principaux\n2. Les quantit√©s approximatives \n3. Les prot√©ines totales apport√©es\n4. La m√©thode d'estimation utilis√©e\n\nR√©ponds UNIQUEMENT en JSON :\n{\n  \"aliments\": [\n    {\n      \"nom\": \"nom de l'aliment\",\n      \"quantite_g\": nombre_en_grammes,\n      \"proteines_100g\": prot√©ines_pour_100g,\n      \"proteines_portion\": prot√©ines_de_cette_portion\n    }\n  ],\n  \"proteines_totales\": somme_des_proteines,\n  \"confiance\": \"high|medium|low\",\n  \"methode\": \"description de la m√©thode d'estimation\",\n  \"raisonnement\": \"explication des calculs\"\n}"
        }
      },
      "id": "a03cf7fa-62a4-4971-9834-125cbdb4a74e",
      "name": "üîç Meal Analyzer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1320,
        870
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Tu es un agent sp√©cialis√© dans l'analyse d'images d'aliments et d'emballages alimentaires.\n\nAnalyse cette image et identifie :\n- Le produit alimentaire visible (nom exact)\n- La marque visible sur l'emballage\n- Les informations nutritionnelles si une √©tiquette est visible\n- La portion consomm√©e si mentionn√©e par l'utilisateur\n\nSi tu vois un pot/emballage et que l'utilisateur dit \"j'en ai mang√© la moiti√©\", estime la portion.\n\nR√©ponds UNIQUEMENT en JSON :\n{\n  \"aliments\": [\n    {\n      \"nom\": \"nom de l'aliment identifi√©\",\n      \"quantite_g\": poids_en_grammes_estime,\n      \"proteines_100g\": prot√©ines_pour_100g,\n      \"proteines_portion\": prot√©ines_de_cette_portion\n    }\n  ],\n  \"proteines_totales\": somme_des_proteines,\n  \"confiance\": \"high|medium|low\",\n  \"methode\": \"Analyse d'image\",\n  \"raisonnement\": \"description d√©taill√©e de ce qui est visible\"\n}\n\nDescription de l'utilisateur : {{ $json.original_message || 'Analyse de l'image fournie' }}\n\nImage √† analyser fournie par l'utilisateur : {{ $json.image_path }}",
        "options": {}
      },
      "id": "02413b1f-00b9-4254-8dd4-9e294b92b719",
      "name": "üëÅÔ∏è Image Analyzer",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1320,
        1370
      ]
    },
    {
      "parameters": {
        "jsCode": "// üìä Traitement et sauvegarde du repas analys√© - VERSION PARSING BACKTICKS\nconst mealAnalysisData = $input.first().json;\nconst parsedActionsData = $('üîß Parse Actions').first().json;\n\nconsole.log('=== PROCESS MEAL DEBUG ===');\nconsole.log('üîç Donn√©es Meal Analyzer:', JSON.stringify(mealAnalysisData, null, 2));\nconsole.log('üîç Donn√©es Parse Actions:', JSON.stringify(parsedActionsData, null, 2));\n\nlet mealData;\n\ntry {\n  let jsonString;\n  \n  // Parser le r√©sultat de l'agent avec gestion des backticks markdown\n  if (mealAnalysisData.output) {\n    jsonString = mealAnalysisData.output;\n    \n    // üîß CORRECTION : Nettoyer les backticks markdown\n    if (jsonString.includes('```json')) {\n      jsonString = jsonString\n        .replace(/```json\\s*\\n?/g, '')  // Supprimer ```json au d√©but\n        .replace(/\\n?```$/g, '')        // Supprimer ``` √† la fin\n        .trim();\n    }\n    \n    console.log('‚úÖ JSON nettoy√©:', jsonString);\n    mealData = JSON.parse(jsonString);\n  } else {\n    mealData = mealAnalysisData;\n  }\n  \n  console.log('‚úÖ Donn√©es meal pars√©es:', JSON.stringify(mealData, null, 2));\n  \n  // R√©cup√©rer les m√©tadonn√©es utilisateur depuis Parse Actions\n  const userId = parsedActionsData.user_id;\n  const timestamp = parsedActionsData.timestamp;\n  const originalMessage = parsedActionsData.original_message;\n  \n  console.log('‚úÖ M√©tadonn√©es utilisateur:');\n  console.log('   - User ID:', userId);\n  console.log('   - Timestamp:', timestamp);\n  console.log('   - Message:', originalMessage);\n  \n  // √âchapper les apostrophes pour √©viter les erreurs SQL\n  const escapedMessage = originalMessage ? originalMessage.replace(/'/g, \"''\") : '';\n  const escapedRaisonnement = mealData.raisonnement ? mealData.raisonnement.replace(/'/g, \"''\") : '';\n  const escapedMethode = (mealData.methode || 'IA Analysis').replace(/'/g, \"''\");\n  \n  // Construire les donn√©es pour la base avec calcul du poids estim√©\n  const poidsEstime = mealData.aliments && mealData.aliments.length > 0 \n    ? mealData.aliments.reduce((total, aliment) => total + (aliment.quantite_g || 0), 0)\n    : 200;\n  \n  const finalData = {\n    user_id: userId,\n    timestamp: timestamp,\n    description_originale: escapedMessage,\n    aliments: JSON.stringify(mealData.aliments || []),\n    proteines_totales: mealData.proteines_totales || 0,\n    poids_estime: poidsEstime,\n    confiance: mealData.confiance || 'medium',\n    methode: escapedMethode,\n    raisonnement: escapedRaisonnement\n  };\n  \n  console.log('‚úÖ Donn√©es finales pour DB:', JSON.stringify(finalData, null, 2));\n  \n  return [{ json: finalData }];\n  \n} catch (error) {\n  console.log('‚ùå Erreur parsing meal:', error.message);\n  console.log('‚ùå JSON string probl√©matique:', mealAnalysisData.output);\n  \n  // Fallback am√©lior√© avec m√©tadonn√©es\n  return [{ \n    json: {\n      user_id: parsedActionsData.user_id,\n      timestamp: parsedActionsData.timestamp,\n      description_originale: (parsedActionsData.original_message || '').replace(/'/g, \"''\"),\n      aliments: JSON.stringify([{nom: \"aliment non identifi√©\", quantite_g: 100, proteines_100g: 20, proteines_portion: 20}]),\n      proteines_totales: 20,\n      poids_estime: 100,\n      confiance: 'low',\n      methode: 'Fallback estimation',\n      raisonnement: 'Erreur dans l\\'analyse IA: ' + error.message\n    }\n  }];\n}"
      },
      "id": "32984648-418c-437f-9417-32a7ff22f26b",
      "name": "üîß Process Meal",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1696,
        1170
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO meal_entries (\n  user_id,\n  produit,\n  description_visuelle,\n  proteines_apportees,\n  poids_estime,\n  methode,\n  source,\n  timestamp\n) VALUES (\n  '{{ $json.user_id }}',\n  $produit${{ $json.description_originale }}$produit$,\n  $description${{ $json.raisonnement }}$description$,\n  {{ $json.proteines_totales }},\n  {{ $json.poids_estime }},\n  $methode${{ $json.methode }}$methode$,\n  'IA Analysis',\n  '{{ $json.timestamp }}'\n) RETURNING \n  user_id,\n  proteines_apportees, \n  'meal_saved' as action;",
        "options": {}
      },
      "id": "4bf312f9-5343-4db3-bfad-e6fa4bd1d28f",
      "name": "üíæ Save Meal",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        1916,
        1170
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  CURRENT_DATE as date,\n  ug.user_id,\n  up.prenom,  -- ‚Üê CORRECTION : r√©cup√©rer le vrai pr√©nom\n  COALESCE(SUM(me.proteines_apportees), 0) as total_proteins,\n  ug.daily_protein_goal,\n  CASE \n    WHEN ug.daily_protein_goal > 0 THEN \n      ROUND((COALESCE(SUM(me.proteines_apportees), 0) * 100.0 / ug.daily_protein_goal), 1)\n    ELSE 0 \n  END as progress_percent,\n  'meal_saved' as action\nFROM user_goals ug\nJOIN user_profiles up ON ug.user_id = up.user_id  -- ‚Üê CORRECTION : ajouter le JOIN\nLEFT JOIN meal_entries me ON ug.user_id = me.user_id \n  AND DATE(me.timestamp) = CURRENT_DATE\nWHERE ug.user_id = '{{ $json.user_id }}'\nGROUP BY ug.user_id, ug.daily_protein_goal, up.prenom;",
        "options": {}
      },
      "id": "fe7cfffd-e0b7-4cd8-a26d-d4031f9f829e",
      "name": "üìà Get Updated Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        2136,
        1170
      ],
      "credentials": {
        "postgres": {
          "id": "GaPd24j9QO3x8L5L",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// üí¨ G√©n√©ration de r√©ponses personnalis√©es - VERSION CORRIG√âE POUR JSON SAFE\nconst allItems = $input.all();\nlet response = '';\n\nconsole.log('=== FORMAT RESPONSE ===');\nallItems.forEach((item, index) => {\n  console.log(`Item ${index}:`, JSON.stringify(item.json, null, 2));\n});\n\n// Identifier le type d'action\nfor (const item of allItems) {\n  const data = item.json;\n  \n  if (data.action === 'goal_updated') {\n    response = `üéØ Objectif mis √† jour !\n\nVotre nouvel objectif quotidien est fix√© √† ${data.daily_protein_goal}g de prot√©ines.\n\nContinuez √† me dire ce que vous mangez pour suivre votre progression ! üí™`;\n    break;\n  }\n  \n  if (data.prenom && data.total_proteins !== undefined) {\n    const prenom = data.prenom;\n    const progressEmoji = data.progress_percent >= 100 ? 'üéâ' : data.progress_percent >= 75 ? 'üí™' : data.progress_percent >= 50 ? 'üëç' : 'üìà';\n    const remaining = Math.max(0, data.daily_protein_goal - data.total_proteins);\n    \n    if (data.action === 'meal_saved') {\n      response = `‚úÖ Repas enregistr√©, ${prenom} !\n\nüìä Votre progression aujourd'hui :\n‚Ä¢ Prot√©ines consomm√©es : ${data.total_proteins}g\n‚Ä¢ Objectif quotidien : ${data.daily_protein_goal}g\n‚Ä¢ Progression : ${data.progress_percent}% ${progressEmoji}\n\n${data.progress_percent >= 100 ? 'üéØ F√©licitations ! Objectif atteint !' : `Il vous reste ${remaining}g √† consommer.`}`;\n    } else {\n      response = `${progressEmoji} Bonjour ${prenom} !\n\nüìä Votre progression aujourd'hui :\n‚Ä¢ Prot√©ines consomm√©es : ${data.total_proteins}g\n‚Ä¢ Objectif quotidien : ${data.daily_protein_goal}g\n‚Ä¢ Progression : ${data.progress_percent}%\n\n${data.progress_percent >= 100 ? 'üéØ Objectif atteint ! Bravo !' : `Plus que ${remaining}g √† consommer ! üí™`}`;\n    }\n    break;\n  }\n}\n\nif (!response) {\n  response = '‚ùå Erreur dans le traitement\\\\n\\\\nJe n\\'ai pas pu traiter votre demande. Veuillez r√©essayer.';\n}\n\nconsole.log('R√©ponse g√©n√©r√©e:', response);\n\n// üîß AM√âLIORATION : Nettoyage sp√©cial pour JSON valide\nconst jsonSafeResponse = response\n  .replace(/\\\\/g, '')                    // Supprimer tous les backslashes\n  .replace(/\\n/g, '\\\\n')                 // √âchapper les vraies nouvelles lignes pour JSON\n  .replace(/\\r/g, '\\\\r')                 // √âchapper les retours chariot\n  .replace(/\\t/g, '\\\\t')                 // √âchapper les tabulations\n  .replace(/\"/g, '\\\\\"')                  // √âchapper les guillemets\n  .replace(/[\\x00-\\x1F\\x7F]/g, '')       // Supprimer les caract√®res de contr√¥le\n  .trim();                               // Supprimer les espaces en d√©but/fin\n\nconsole.log('R√©ponse JSON-safe:', jsonSafeResponse);\n\n// Construire une r√©ponse JSON compl√®tement s√ªre\nconst safeJsonResponse = {\n  message: jsonSafeResponse,\n  status: \"success\",\n  timestamp: new Date().toISOString(),\n  messageLength: jsonSafeResponse.length\n};\n\nconsole.log('Objet JSON final:', JSON.stringify(safeJsonResponse, null, 2));\n\nreturn [{ json: safeJsonResponse }];"
      },
      "id": "bff8f1f9-c667-4af9-bbe6-9849e7c44d24",
      "name": "üí¨ Format Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2340,
        720
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-2024-11-20",
          "mode": "list",
          "cachedResultName": "gpt-4o-2024-11-20"
        },
        "options": {}
      },
      "id": "aaeabcf6-c687-4248-9692-05f3fa45680f",
      "name": "ü§ñ Classifier Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        440,
        1065
      ],
      "credentials": {
        "openAiApi": {
          "id": "KvKI09VGVtdDw3Bt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "f3265389-6ea6-4cd2-9b3f-919979ea6886",
      "name": "üîç Meal Analyzer Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1348,
        1090
      ],
      "credentials": {
        "openAiApi": {
          "id": "KvKI09VGVtdDw3Bt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "be2338c1-bbef-4a62-8846-64af745a0517",
      "name": "üëÅÔ∏è Image Analyzer Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1348,
        1590
      ],
      "credentials": {
        "openAiApi": {
          "id": "KvKI09VGVtdDw3Bt",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "id": "7f19589d-01af-43f5-9a93-97f46182ba98",
      "name": "ü§ñ Classifier Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1,
      "position": [
        560,
        1065
      ]
    },
    {
      "parameters": {},
      "id": "88f3f33c-5b37-4e62-b6b9-77a8b91a1627",
      "name": "üîç Meal Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1,
      "position": [
        1468,
        1090
      ]
    },
    {
      "parameters": {},
      "id": "b893f25e-3d91-48f3-ae4d-07ffc19bdddc",
      "name": "üëÅÔ∏è Image Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1,
      "position": [
        1468,
        1590
      ]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.htmlContent }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "text/html; charset=utf-8"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        1320,
        0
      ],
      "id": "0361677f-58b3-4bce-907b-8d893d81e967",
      "name": "üìÑ HTML Success Response"
    },
    {
      "parameters": {
        "path": "e4a90603-3a21-4289-9f42-0c83f4caf994",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        260
      ],
      "id": "3ff63b11-3fc2-4242-b7e4-3d191c542e23",
      "name": "Webhook",
      "webhookId": "e4a90603-3a21-4289-9f42-0c83f4caf994"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ebd4abc8-6795-4fbe-ba99-c8574f0e3416",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        845
      ],
      "id": "de8b8aef-67ab-4f24-a925-c1ad2926b1fc",
      "name": "Webhook1",
      "webhookId": "ebd4abc8-6795-4fbe-ba99-c8574f0e3416"
    },
    {
      "parameters": {
        "jsCode": "// üñ•Ô∏è CORRECTION FINALE - Interface de Chat sans caract√®res parasites\nconst query = $input.first().json.query || {};\nconst userId = query.userId;\nconst prenom = query.prenom;\n\nconsole.log('=== WEBHOOK GET PROCESSING ===');\nconsole.log('Query params:', JSON.stringify(query, null, 2));\nconsole.log('User ID:', userId);\n\nif (!userId) {\n  return [{\n    json: {\n      htmlContent: `\n        <html>\n          <body style=\"font-family: Arial; text-align: center; padding: 50px;\">\n            <h2>‚ùå Erreur</h2>\n            <p>userId manquant dans l'URL</p>\n            <p>Format attendu: <code>?userId=xxx</code></p>\n          </body>\n        </html>\n      `\n    }\n  }];\n}\n\n// Page HTML de chat CORRIG√âE SANS CARACT√àRES PARASITES\nconst chatHtml = `<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>DynProt Chat</title>\n    <style>\n        body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \n            max-width: 700px; \n            margin: 0 auto; \n            padding: 20px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n        }\n        .chat-container { \n            background: white;\n            border-radius: 20px;\n            padding: 30px;\n            box-shadow: 0 15px 35px rgba(0,0,0,0.1);\n            backdrop-filter: blur(10px);\n        }\n        .header { \n            text-align: center; \n            margin-bottom: 25px;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #f1f3f4;\n        }\n        .header h1 {\n            color: #2c3e50;\n            margin-bottom: 8px;\n            font-size: 24px;\n        }\n        .header p {\n            color: #7f8c8d;\n            margin: 0;\n        }\n        .user-info { \n            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n            padding: 15px 20px; \n            border-radius: 12px; \n            margin-bottom: 25px;\n            border: 1px solid rgba(0,0,0,0.05);\n        }\n        .user-info strong {\n            color: #495057;\n        }\n        .input-group { \n            display: flex; \n            gap: 12px; \n            margin: 25px 0; \n        }\n        #messageInput { \n            flex: 1; \n            padding: 15px 18px; \n            border: 2px solid #e9ecef; \n            border-radius: 12px; \n            font-size: 16px;\n            transition: border-color 0.3s ease;\n            outline: none;\n        }\n        #messageInput:focus {\n            border-color: #667eea;\n            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n        }\n        #sendButton { \n            padding: 15px 25px; \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white; \n            border: none; \n            border-radius: 12px; \n            cursor: pointer; \n            font-size: 16px;\n            font-weight: 600;\n            transition: all 0.3s ease;\n            min-width: 100px;\n        }\n        #sendButton:hover { \n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\n        }\n        #sendButton:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n            transform: none;\n        }\n        .suggestions {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            margin: 20px 0;\n            justify-content: center;\n        }\n        .suggestions button {\n            background: #f8f9fa;\n            border: 1px solid #dee2e6;\n            border-radius: 20px;\n            padding: 10px 16px;\n            cursor: pointer;\n            font-size: 14px;\n            transition: all 0.3s ease;\n            white-space: nowrap;\n        }\n        .suggestions button:hover { \n            background: #007bff; \n            color: white;\n            transform: translateY(-1px);\n            box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);\n        }\n        .response { \n            margin-top: 25px; \n            padding: 20px; \n            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n            border-radius: 12px; \n            display: none;\n            border: 1px solid rgba(0,0,0,0.05);\n            animation: slideIn 0.3s ease-out;\n        }\n        .response.show {\n            display: block;\n        }\n        @keyframes slideIn {\n            from { opacity: 0; transform: translateY(10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        .response .message-content {\n            line-height: 1.6;\n            color: #2c3e50;\n        }\n        .response .message-content .highlight {\n            color: #2980b9;\n            font-weight: 600;\n            background: rgba(52, 152, 219, 0.1);\n            padding: 2px 6px;\n            border-radius: 4px;\n        }\n        .response .message-content strong {\n            color: #27ae60;\n            font-weight: 600;\n        }\n        .response .message-content .emoji {\n            font-size: 1.2em;\n        }\n        .loading {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            color: #6c757d;\n        }\n        .loading-dots {\n            display: inline-flex;\n            gap: 4px;\n        }\n        .loading-dots span {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background: #007bff;\n            animation: bounce 1.4s infinite ease-in-out both;\n        }\n        .loading-dots span:nth-child(1) { animation-delay: -0.32s; }\n        .loading-dots span:nth-child(2) { animation-delay: -0.16s; }\n        @keyframes bounce {\n            0%, 80%, 100% { transform: scale(0.8); opacity: 0.5; }\n            40% { transform: scale(1); opacity: 1; }\n        }\n        .error-message {\n            background: #f8d7da;\n            color: #721c24;\n            border: 1px solid #f5c6cb;\n            border-radius: 8px;\n            padding: 15px;\n            margin-top: 15px;\n        }\n        /* Responsive */\n        @media (max-width: 600px) {\n            body { padding: 10px; }\n            .chat-container { padding: 20px; }\n            .input-group { flex-direction: column; }\n            #sendButton { width: 100%; }\n            .suggestions { justify-content: stretch; }\n            .suggestions button { flex: 1; text-align: center; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"chat-container\">\n        <div class=\"header\">\n            <h1>ü•ó DynProt Chat</h1>\n            <p>Votre Assistant Nutritionnel</p>\n        </div>\n        \n        <div class=\"user-info\">\n            <strong>üë§ Utilisateur :</strong> ${prenom || 'Utilisateur'}\n        </div>\n        \n        <div class=\"input-group\">\n            <input type=\"text\" id=\"messageInput\" placeholder=\"D√©crivez votre repas ou posez une question...\">\n            <button id=\"sendButton\" onclick=\"sendMessage()\">Envoyer</button>\n        </div>\n        \n        <div class=\"suggestions\">\n            <button onclick=\"quickMessage('o√π j\\\\'en suis ?')\">üìä Ma progression</button>\n            <button onclick=\"quickMessage('j\\\\'ai mang√© 200g de poulet grill√©')\">üçó Ajouter repas</button>\n            <button onclick=\"quickMessage('nouvel objectif 150g')\">üéØ Changer objectif</button>\n            <button onclick=\"quickMessage('bilan de la semaine')\">üìà Bilan hebdo</button>\n        </div>\n        \n        <div id=\"response\" class=\"response\"></div>\n    </div>\n\n    <script>\n        const userId = '${userId}';\n        \n        function quickMessage(message) {\n            document.getElementById('messageInput').value = message;\n            sendMessage();\n        }\n        \n        async function sendMessage() {\n            const messageInput = document.getElementById('messageInput');\n            const sendButton = document.getElementById('sendButton');\n            const responseDiv = document.getElementById('response');\n            const message = messageInput.value.trim();\n            \n            if (!message) return;\n            \n            // D√©sactiver l'interface pendant l'envoi\n            sendButton.disabled = true;\n            sendButton.textContent = 'Envoi...';\n            messageInput.disabled = true;\n            \n            // Afficher le loading\n            responseDiv.className = 'response show';\n            responseDiv.innerHTML = \\`\n                <div class=\"loading\">\n                    <div class=\"loading-dots\">\n                        <span></span>\n                        <span></span>\n                        <span></span>\n                    </div>\n                    <span>Analyse en cours...</span>\n                </div>\n            \\`;\n            \n            try {\n                const response = await fetch('http://localhost:5678/webhook/ebd4abc8-6795-4fbe-ba99-c8574f0e3416', {\n                    method: 'POST',\n                    headers: { \n                        'Content-Type': 'application/json',\n                        'Accept': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        userId: userId,\n                        message: message\n                    })\n                });\n                \n                if (!response.ok) {\n                    throw new Error(\\`Erreur HTTP: \\${response.status}\\`);\n                }\n                \n                const result = await response.json();\n                console.log('R√©ponse re√ßue:', result);\n                \n                // ‚úÖ CORRECTION : Parser et formater la r√©ponse\n                let displayMessage = '';\n                \n                if (result.message) {\n                    // D√©coder les caract√®res √©chapp√©s\n                    displayMessage = result.message\n                        .replace(/\\\\\\\\n/g, '\\\\n')           // Remplacer \\\\n par des vraies nouvelles lignes\n                        .replace(/\\\\\\\\\"/g, '\"')           // Remplacer \\\\\" par des guillemets\n                        .replace(/\\\\\\\\\\\\\\\\/g, '\\\\\\\\')       // Remplacer \\\\\\\\\\\\\\\\ par \\\\\\\\\n                        .replace(/\\\\\\\\t/g, '\\\\t')           // Remplacer \\\\t par des tabulations\n                        .replace(/\\\\\\\\r/g, '\\\\r');          // Remplacer \\\\r par des retours chariot\n                } else if (result.status === 'success' && result.data) {\n                    displayMessage = 'Donn√©es re√ßues avec succ√®s';\n                } else {\n                    displayMessage = JSON.stringify(result, null, 2);\n                }\n                \n                // Afficher le message format√©\n                responseDiv.innerHTML = \\`\n                    <div class=\"message-content\">\n                        \\${formatMessage(displayMessage)}\n                    </div>\n                \\`;\n                \n            } catch (error) {\n                console.error('Erreur:', error);\n                responseDiv.innerHTML = \\`\n                    <div class=\"error-message\">\n                        <strong>‚ùå Erreur de communication</strong><br>\n                        \\${error.message}<br>\n                        <small>V√©rifiez votre connexion et r√©essayez.</small>\n                    </div>\n                \\`;\n            } finally {\n                // R√©activer l'interface\n                sendButton.disabled = false;\n                sendButton.textContent = 'Envoyer';\n                messageInput.disabled = false;\n                messageInput.value = '';\n                messageInput.focus();\n            }\n        }\n        \n        // ‚úÖ FONCTION CORRIG√âE : Formatage sans caract√®res parasites\n        function formatMessage(message) {\n            return message\n                .replace(/^=.*$/gm, '')            // Supprimer = et emojis en d√©but de ligne\n                .replace(/^\\\\s*=.*$/gm, '')                         // Supprimer toutes les lignes qui commencent par =\n                .replace(/=\\\\//g, '')                               // Supprimer =/ n'importe o√π\n                .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<span class=\"highlight\">$1</span>')  // **texte** ‚Üí highlight\n                .replace(/\\\\*(.*?)\\\\*/g, '<em>$1</em>')             // *texte* ‚Üí <em>texte</em>\n                .replace(/\\\\n/g, '<br>')                            // Nouvelles lignes ‚Üí <br>\n                .replace(/‚Ä¢/g, '&bull;')                            // Bullets\n                .replace(/^\\\\s*<br>/gm, '')                         // Supprimer les <br> en d√©but de ligne\n                .replace(/<br>\\\\s*<br>/g, '<br>')                   // Supprimer les doubles <br>\n                .trim();                                            // Supprimer les espaces en d√©but/fin\n        }\n        \n        // Enter pour envoyer\n        document.getElementById('messageInput').addEventListener('keypress', function(e) {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                sendMessage();\n            }\n        });\n        \n        // Focus automatique sur l'input\n        document.getElementById('messageInput').focus();\n    </script>\n</body>\n</html>`;\n\nconst chatHtmlClean = chatHtml.replace(/^\\=+$/gm, ''); // Supprime toute ligne ne contenant qu'un =\nreturn [{\n  json: { \n    htmlContent: chatHtmlClean,\n    responseType: 'html'\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        260
      ],
      "id": "96eccfd8-d4ba-49cb-b2c1-20a0bf4438a4",
      "name": "Code"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "= ={{ $json.htmlContent }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        440,
        260
      ],
      "id": "c0aab0a9-dbb8-466d-a460-501142992776",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"message\": \"{{ $json.message }}\",\n  \"status\": \"{{ $json.status }}\",\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        2576,
        720
      ],
      "id": "e4a96c0d-0985-45a4-835d-b0a58e5fed0d",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "STATUS",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "7f7fd388-478c-4155-ac62-a4050a96632a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4689680f-1f8e-400c-b01a-157dbdf03afc",
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "GOAL_UPDATE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "354c8d13-1617-4a31-8f24-4167d8ce4084",
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "MEAL",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7527908e-9b19-4260-8fdb-0379dc336369",
                    "leftValue": "={{ $json.action }}",
                    "rightValue": "IMAGE",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1100,
        824
      ],
      "id": "dcbd3adc-0c9d-4522-873a-11679c6db5c4",
      "name": "Switch"
    },
    {
      "parameters": {
        "description": "Analyse m√©thodique du message utilisateur pour classification d'intention. Examine : 1) Pr√©sence du mot \"objectif\" + nombre ‚Üí GOAL_UPDATE prioritaire, 2) Pr√©sence d'aliments ou verbes de consommation (mang√©, bu, pris) ‚Üí MEAL, 3) Questions sur progression sans aliment/objectif ‚Üí STATUS, 4) Mentions d'images ‚Üí IMAGE. Applique les r√®gles de priorit√© et justifie le choix avant la r√©ponse JSON finale."
      },
      "type": "@n8n/n8n-nodes-langchain.toolThink",
      "typeVersion": 1,
      "position": [
        680,
        1065
      ],
      "id": "d003ebf3-d6d2-4f5e-b034-ae891c4e60ee",
      "name": "Think"
    },
    {
      "parameters": {
        "jsCode": "// üíæ Save Uploaded Image\nconst data = $input.first().json;\nconst fs = require('fs');\n\nlet imagePath = null;\nif (data.image_base64) {\n  imagePath = `/tmp/${Date.now()}_${data.user_id}.png`;\n  fs.writeFileSync(imagePath, data.image_base64, 'base64');\n  console.log('Image enregistr√©e:', imagePath);\n}\n\nreturn [{ json: { ...data, image_path: imagePath } }];\n"
      },
      "id": "821519e2-5539-42c8-b4c3-5bded49da8c2",
      "name": "üíæ Save Uploaded Image",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        344,
        845
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "üìù Enhanced Form Onboarding": {
      "main": [
        [
          {
            "node": "üîß Process Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Process Profile": {
      "main": [
        [
          {
            "node": "üíæ Save User Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Save User Profile": {
      "main": [
        [
          {
            "node": "üí¨ Generate Welcome Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üí¨ Generate Welcome Message": {
      "main": [
        [
          {
            "node": "üíæ Save Welcome Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Save Welcome Message": {
      "main": [
        [
          {
            "node": "üé® Generate Success Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Enhanced Prepare Chat Data": {
      "main": [
        [
          {
            "node": "üíæ Save Uploaded Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ Smart Classifier": {
      "main": [
        [
          {
            "node": "üîß Parse Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Parse Actions": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üéØ Update Goal": {
      "main": [
        [
          {
            "node": "üí¨ Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìä Get Status": {
      "main": [
        [
          {
            "node": "üí¨ Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîç Meal Analyzer": {
      "main": [
        [
          {
            "node": "üîß Process Meal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üëÅÔ∏è Image Analyzer": {
      "main": [
        [
          {
            "node": "üîß Process Meal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîß Process Meal": {
      "main": [
        [
          {
            "node": "üíæ Save Meal",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Save Meal": {
      "main": [
        [
          {
            "node": "üìà Get Updated Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìà Get Updated Status": {
      "main": [
        [
          {
            "node": "üí¨ Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ Classifier Model": {
      "ai_languageModel": [
        [
          {
            "node": "ü§ñ Smart Classifier",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "üîç Meal Analyzer Model": {
      "ai_languageModel": [
        [
          {
            "node": "üîç Meal Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "üëÅÔ∏è Image Analyzer Model": {
      "ai_languageModel": [
        [
          {
            "node": "üëÅÔ∏è Image Analyzer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ Classifier Memory": {
      "ai_memory": [
        [
          {
            "node": "ü§ñ Smart Classifier",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "üîç Meal Memory": {
      "ai_memory": [
        [
          {
            "node": "üîç Meal Analyzer",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "üëÅÔ∏è Image Memory": {
      "ai_memory": [
        [
          {
            "node": "üëÅÔ∏è Image Analyzer",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "üé® Generate Success Page": {
      "main": [
        [
          {
            "node": "üìÑ HTML Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "üîß Enhanced Prepare Chat Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üí¨ Format Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "üìä Get Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üéØ Update Goal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üîç Meal Analyzer",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üëÅÔ∏è Image Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Think": {
      "ai_tool": [
        [
          {
            "node": "ü§ñ Smart Classifier",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "üíæ Save Uploaded Image": {
      "main": [
        [
          {
            "node": "ü§ñ Smart Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "437ec59e-c4de-4aff-8d50-25a85b97805e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "d0d287503b40cc7954d6643957a6c1b6e7d06f905ce81aad489a7c6d9432ba3f"
  },
  "id": "LGAfk8XJnhKmg6DB",
  "tags": []
}
